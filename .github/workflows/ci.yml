```yaml
name: CalcOS CI Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.10']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools kivy matplotlib numpy flake8

    - name: Run linting with flake8
      run: |
        flake8 calcos.py --max-line-length=120 --ignore=E402

    - name: Run basic tests
      run: |
        python -m unittest discover -s . -p "test_calcos.py"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: calcos-artifacts-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          calcos.py
          README.md
```

# Test file to be used with the workflow
# Save as test_calcos.py in the same directory as calcos.py
<xaiArtifact artifact_id="c838998b-1f1c-427f-91e8-b60b246092e7" artifact_version_id="ae46c450-e25b-4bcd-b571-eeff368736a4" title="test_calcos.py" contentType="text/python">
```python
"""
CalcOS Test Suite
Author: Odafeigho

Basic unit tests for the CalcOS ScientificCalculator class.
"""

import unittest
from calcos import ScientificCalculator, CalculatorError

class TestScientificCalculator(unittest.TestCase):
    def setUp(self):
        self.calc = ScientificCalculator()

    def test_basic_arithmetic(self):
        self.assertEqual(self.calc.evaluate('2 + 3'), 5)
        self.assertEqual(self.calc.evaluate('10 - 4'), 6)
        self.assertEqual(self.calc.evaluate('3 * 4'), 12)
        self.assertEqual(self.calc.evaluate('15 / 3'), 5.0)

    def test_scientific_functions(self):
        self.assertAlmostEqual(self.calc.evaluate('sin(0)'), 0.0)
        self.assertAlmostEqual(self.calc.evaluate('cos(0)'), 1.0)
        self.assertAlmostEqual(self.calc.evaluate('log(100)'), 2.0)
        self.assertAlmostEqual(self.calc.evaluate('sqrt(16)'), 4.0)

    def test_factorial(self):
        self.assertEqual(self.calc.evaluate('fact(5)'), 120)
        with self.assertRaises(CalculatorError):
            self.calc.evaluate('fact(-1)')

    def test_simulation_functions(self):
        dice_result = self.calc.evaluate('dice()')
        self.assertTrue(isinstance(dice_result, int) and 1 <= dice_result <= 6)
        coin_result = self.calc.evaluate('coin()')
        self.assertIn(coin_result, ['Heads', 'Tails'])

    def test_graphing_variable(self):
        self.assertEqual(self.calc.evaluate('x', x=5), 5)
        self.assertAlmostEqual(self.calc.evaluate('sin(x)', x=0), 0.0)

    def test_invalid_expression(self):
        result = self.calc.evaluate('invalid_func()')
        self.assertTrue(result.startswith('Error:'))

if __name__ == '__main__':
    unittest.main()
```
